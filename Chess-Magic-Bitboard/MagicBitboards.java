public class MagicBitboards {
    
    public static final long[] BishopMask = {
        0x0040201008040200L, 0x0000402010080400L, 0x0000004020100A00L, 0x0000000040221400L, 0x0000000002442800L, 0x0000000204085000L, 0x0000020408102000L, 0x0002040810204000L,
        0x0020100804020000L, 0x0040201008040000L, 0x00004020100A0000L, 0x0000004022140000L, 0x0000000244280000L, 0x0000020408500000L, 0x0002040810200000L, 0x0004081020400000L,
        0x0010080402000200L, 0x0020100804000400L, 0x004020100A000A00L, 0x0000402214001400L, 0x0000024428002800L, 0x0002040850005000L, 0x0004081020002000L, 0x0008102040004000L,
        0x0008040200020400L, 0x0010080400040800L, 0x0020100A000A1000L, 0x0040221400142200L, 0x0002442800284400L, 0x0004085000500800L, 0x0008102000201000L, 0x0010204000402000L,
        0x0004020002040800L, 0x0008040004081000L, 0x00100A000A102000L, 0x0022140014224000L, 0x0044280028440200L, 0x0008500050080400L, 0x0010200020100800L, 0x0020400040201000L,
        0x0002000204081000L, 0x0004000408102000L, 0x000A000A10204000L, 0x0014001422400000L, 0x0028002844020000L, 0x0050005008040200L, 0x0020002010080400L, 0x0040004020100800L,
        0x0000020408102000L, 0x0000040810204000L, 0x00000A1020400000L, 0x0000142240000000L, 0x0000284402000000L, 0x0000500804020000L, 0x0000201008040200L, 0x0000402010080400L,
        0x0002040810204000L, 0x0004081020400000L, 0x000A102040000000L, 0x0014224000000000L, 0x0028440200000000L, 0x0050080402000000L, 0x0020100804020000L, 0x0040201008040200L
    };

    public static final long[] BishopMagicNum = {
        0x0002020202020200L, 0x0002020202020000L, 0x0004010202000000L, 0x0004040080000000L, 0x0001104000000000L, 0x0000821040000000L, 0x0000410410400000L, 0x0000104104104000L,
        0x0000040404040400L, 0x0000020202020200L, 0x0000040102020000L, 0x0000040400800000L, 0x0000011040000000L, 0x0000008210400000L, 0x0000004104104000L, 0x0000002082082000L,
        0x0004000808080800L, 0x0002000404040400L, 0x0001000202020200L, 0x0000800802004000L, 0x0000800400A00000L, 0x0000200100884000L, 0x0000400082082000L, 0x0000200041041000L,
        0x0002080010101000L, 0x0001040008080800L, 0x0000208004010400L, 0x0000404004010200L, 0x0000840000802000L, 0x0000404002011000L, 0x0000808001041000L, 0x0000404000820800L,
        0x0001041000202000L, 0x0000820800101000L, 0x0000104400080800L, 0x0000020080080080L, 0x0000404040040100L, 0x0000808100020100L, 0x0001010100020800L, 0x0000808080010400L,
        0x0000820820004000L, 0x0000410410002000L, 0x0000082088001000L, 0x0000002011000800L, 0x0000080100400400L, 0x0001010101000200L, 0x0002020202000400L, 0x0001010101000200L,
        0x0000410410400000L, 0x0000208208200000L, 0x0000002084100000L, 0x0000000020880000L, 0x0000001002020000L, 0x0000040408020000L, 0x0004040404040000L, 0x0002020202020000L,
        0x0000104104104000L, 0x0000002082082000L, 0x0000000020841000L, 0x0000000000208800L, 0x0000000010020200L, 0x0000000404080200L, 0x0000040404040400L, 0x0002020202020200L
    };

    public static final long[] RookMask = {
        0x000101010101017EL, 0x000202020202027CL, 0x000404040404047AL, 0x0008080808080876L, 0x001010101010106EL, 0x002020202020205EL, 0x004040404040403EL, 0x008080808080807EL,
        0x0001010101017E00L, 0x0002020202027C00L, 0x0004040404047A00L, 0x0008080808087600L, 0x0010101010106E00L, 0x0020202020205E00L, 0x0040404040403E00L, 0x0080808080807E00L,
        0x00010101017E0100L, 0x00020202027C0200L, 0x00040404047A0400L, 0x0008080808760800L, 0x00101010106E1000L, 0x00202020205E2000L, 0x00404040403E4000L, 0x00808080807E8000L,
        0x000101017E010100L, 0x000202027C020200L, 0x000404047A040400L, 0x0008080876080800L, 0x001010106E101000L, 0x002020205E202000L, 0x004040403E404000L, 0x008080807E808000L,
        0x0001017E01010100L, 0x0002027C02020200L, 0x0004047A04040400L, 0x0008087608080800L, 0x0010106E10101000L, 0x0020205E20202000L, 0x0040403E40404000L, 0x0080807E80808000L,
        0x00017E0101010100L, 0x00027C0202020200L, 0x00047A0404040400L, 0x0008760808080800L, 0x00106E1010101000L, 0x00205E2020202000L, 0x00403E4040404000L, 0x00807E8080808000L,
        0x007E010101010100L, 0x007C020202020200L, 0x007A040404040400L, 0x0076080808080800L, 0x006E101010101000L, 0x005E202020202000L, 0x003E404040404000L, 0x007E808080808000L,
        0x7E01010101010100L, 0x7C02020202020200L, 0x7A04040404040400L, 0x7608080808080800L, 0x6E10101010101000L, 0x5E20202020202000L, 0x3E40404040404000L, 0x7E80808080808000L
    };

    /*public static final long[] RookMagicNum = {
        0x0080001020400080L, 0x0040001000200040L, 0x0080081000200080L, 0x0080040800100080L, 0x0080020400080080L, 0x0080010200040080L, 0x0080008001000200L, 0x0080002040800100L,
        0x0000800020400080L, 0x0000400020005000L, 0x0000801000200080L, 0x0000800800100080L, 0x0000800400080080L, 0x0000800200040080L, 0x0000800100020080L, 0x0000800040800100L,
        0x0000208000400080L, 0x0000404000201000L, 0x0000808010002000L, 0x0000808008001000L, 0x0000808004000800L, 0x0000808002000400L, 0x0000010100020004L, 0x0000020000408104L,
        0x0000208080004000L, 0x0000200040005000L, 0x0000100080200080L, 0x0000080080100080L, 0x0000040080080080L, 0x0000020080040080L, 0x0000010080800200L, 0x0000800080004100L,
        0x0000204000800080L, 0x0000200040401000L, 0x0000100080802000L, 0x0000080080801000L, 0x0000040080800800L, 0x0000020080800400L, 0x0000020001010004L, 0x0000800040800100L,
        0x0000204000808000L, 0x0000200040008080L, 0x0000100020008080L, 0x0000080010008080L, 0x0000040008008080L, 0x0000020004008080L, 0x0000010002008080L, 0x0000004081020004L,
        0x0000204000800080L, 0x0000200040008080L, 0x0000100020008080L, 0x0000080010008080L, 0x0000040008008080L, 0x0000020004008080L, 0x0000800100020080L, 0x0000800041000080L,
        0x0000102040800101L, 0x0000102040008101L, 0x0000081020004101L, 0x0000040810002101L, 0x0001000204080011L, 0x0001000204000801L, 0x0001000082000401L, 0x0000002040810402L
    };*/

    public static final long[] RookMagicNum = {
        0x0080001020400080L, 0x0040001000200040L, 0x0080081000200080L, 0x0080040800100080L,
        0x0080020400080080L, 0x0080010200040080L, 0x0080008001000200L, 0x0080002040800100L,
        0x0000800020400080L, 0x0000400020005000L, 0x0000801000200080L, 0x0000800800100080L,
        0x0000800400080080L, 0x0000800200040080L, 0x0000800100020080L, 0x0000800040800100L,
        0x0000208000400080L, 0x0000404000201000L, 0x0000808010002000L, 0x0000808008001000L,
        0x0000808004000800L, 0x0000808002000400L, 0x0000010100020004L, 0x0000020000408104L,
        0x0000208080004000L, 0x0000200040005000L, 0x0000100080200080L, 0x0000080080100080L,
        0x0000040080080080L, 0x0000020080040080L, 0x0000010080800200L, 0x0000800080004100L,
        0x0000204000800080L, 0x0000200040401000L, 0x0000100080802000L, 0x0000080080801000L,
        0x0000040080800800L, 0x0000020080800400L, 0x0000020001010004L, 0x0000800040800100L,
        0x0000204000808000L, 0x0000200040008080L, 0x0000100020008080L, 0x0000080010008080L,
        0x0000040008008080L, 0x0000020004008080L, 0x0000010002008080L, 0x0000004081020004L,
        0x0000204000800080L, 0x0000200040008080L, 0x0000100020008080L, 0x0000080010008080L,
        0x0000040008008080L, 0x0000020004008080L, 0x0000800100020080L, 0x0000800041000080L,
        0x00FFFCDDFCED714AL, 0x007FFCDDFCED714AL, 0x003FFFCDFFD88096L, 0x0000040810002101L,
        0x0001000204080011L, 0x0001000204000801L, 0x0001000082000401L, 0x0001FFFAABFAD1A2L
    };

    /*public static final long[] RookMagicNum = {
        0x0080001020400080L, 0x0040001000200040L, 0x0080081000200080L, 0x0080040800100080L, 
        0x0080020400080080L, 0x0080010200040080L, 0x0080008001000200L, 0x0080002040800100L,
        0x0000800020400080L, 0x0000400020005000L, 0x0000801000200080L, 0x0000800800100080L,
        0x0000800400080080L, 0x0000800200040080L, 0x0000800100020080L, 0x0000800040800100L,
        0x0000208000400080L, 0x0000404000201000L, 0x0000808010002000L, 0x0000808008001000L,
        0x0000808004000800L, 0x0000808002000400L, 0x0000010100020004L, 0x0000020000408104L,
        0x0000208080004000L, 0x0000200040005000L, 0x0000100080200080L, 0x0000080080100080L,
        0x0000040080080080L, 0x0000020080040080L, 0x0000010080800200L, 0x0000800080004100L,
        0x0000204000800080L, 0x0000200040401000L, 0x0000100080802000L, 0x0000080080801000L,
        0x0000040080800800L, 0x0000020080800400L, 0x0000020001010004L, 0x0000800040800100L,
        0x0000204000808000L, 0x0000200040008080L, 0x0000100020008080L, 0x0000080010008080L,
        0x0000040008008080L, 0x0000020004008080L, 0x0000010002008080L, 0x0000004081020004L,
        0x0000204000800080L, 0x0000200040008080L, 0x0000100020008080L, 0x0000080010008080L,
        0x0000040008008080L, 0x0000020004008080L, 0x0000800100020080L, 0x0000800041000080L,
        0x0000102040800101L, 0x0000102040008101L, 0x0000081020004101L, 0x0000040810002101L,
        0x0001000204080011L, 0x0001000204000801L, 0x0001000082000401L, 0x0000002040810402L
    };*/

    public static int[] RBits = {
        12, 11, 11, 11, 11, 11, 11, 12,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        12, 11, 11, 11, 11, 11, 11, 12
    };

    public static int[] BBits = {
        6, 5, 5, 5, 5, 5, 5, 6,
        5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 7, 7, 7, 7, 5, 5,
        5, 5, 7, 9, 9, 7, 5, 5,
        5, 5, 7, 9, 9, 7, 5, 5,
        5, 5, 7, 7, 7, 7, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5,
        6, 5, 5, 5, 5, 5, 5, 6
    };

    public static long getRookAttacks(long rookPosition, long blockers) {
        // all of the possible shifts
        // left shifts are represented as positive, right shifts as negative
        int[] shifts = {1, 8, -1, -8};
        long movingPiece;
        long ret = 0L;
            // for each of the possible shifts
            for(int shift : shifts){
                movingPiece = rookPosition;
                // while the shift is valid (still on board)
                while(Utility.onBoard(movingPiece, shift)){
                    // update movingPiece so that is has rook in its new position
                    movingPiece = (shift > 0) ? (movingPiece << shift) : (movingPiece >>> -shift);

                    if((movingPiece & blockers) != 0){
                        ret = ret | movingPiece;
                        break;
                    }
                    // else the square is not occupied
                    else{
                        ret = ret | movingPiece;
                    }
                    
                    
                }
            }

        return ret;
    }

    public static long getBishopAttacks(long bishopPosition, long blockers) {
        // all of the possible shifts
        // left shifts are represented as positive, right shifts as negative
        int[] shifts = {7, 9, -7, -9};
        long movingPiece;
        long ret = 0L;
            // for each of the possible shifts
            for(int shift : shifts){
                movingPiece = bishopPosition;
                // while the shift is valid (still on board)
                while(Utility.onBoard(movingPiece, shift)){
                    // update movingPiece so that is has rook in its new position
                    movingPiece = (shift > 0) ? (movingPiece << shift) : (movingPiece >>> -shift);

                    if((movingPiece & blockers) != 0){
                        ret = ret | movingPiece;
                        break;
                    }
                    // else the square is not occupied
                    else{
                        ret = ret | movingPiece;
                    }
                    
                    
                }
            }

        return ret;
    }

    // figure out how to precalculate all possible Bishop moves
    public long bishopMoves(long occ, int index) {
        occ &= BishopMask[index];
        occ *= BishopMagicNum[index];
        occ >>>= 64 - BBits[index];
        //return bishopAttacks[(int) occ];
        return 0;
    }

    // figure out how to precalculate all possible Rook moves
    public long rookMoves(long occ, int index) {
        occ &= RookMask[index];
        occ *= RookMagicNum[index];
        occ >>>= 64 - RBits[index];
        //return rookAttacks[(int) occ];
        return 0;
    }

}
